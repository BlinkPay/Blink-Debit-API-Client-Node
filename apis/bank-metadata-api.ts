/* tslint:disable */
/* eslint-disable */
/**
 * Blink Debit (PayNow and AutoPay) Payments API
 * APIs to execute Direct Credit payments for customers who use online banking with supported banks.  These APIs power **Blink PayNow** enabling one-off payments, and **Blink AutoPay** enabling recurring payments.  **Request IDs** Request IDs are included in the header in every response, to assist in tracing and debugging.  **API Change Policy** Additive changes may be made to request query parameters and JSON responses. To preserve backward compatibility, endpoint naming updates or JSON elements that already exist will not be removed or renamed until a major version (URL) change. This policy applies only after the official v1 release.
 *
 * OpenAPI spec version: 1.0.19
 * Contact: sysadmin@blinkpay.co.nz
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { BankMetadata } from '../models';
import { DetailErrorResponseModel } from '../models';
/**
 * BankMetadataApi - axios parameter creator
 * @export
 */
export const BankMetadataApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * The available banks, features available for the banks, and relevant fields.
         * @summary Get Bank Metadata
         * @param {string} [requestId] An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit.
         * @param {string} [xCorrelationId] An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeta: async (requestId?: string, xCorrelationId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/meta`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Bearer", ["create:single_consent", "view:single_consent", "revoke:single_consent", "create:enduring_consent", "view:enduring_consent", "revoke:enduring_consent", "create:payment", "view:payment", "view:metadata", "view:transaction", "create:quick_payment", "view:quick_payment", "create:refund", "view:refund"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (requestId !== undefined && requestId !== null) {
                localVarHeaderParameter['request-id'] = String(JSON.stringify(requestId));
            }

            if (xCorrelationId !== undefined && xCorrelationId !== null) {
                localVarHeaderParameter['x-correlation-id'] = String(JSON.stringify(xCorrelationId));
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BankMetadataApi - functional programming interface
 * @export
 */
export const BankMetadataApiFp = function(configuration?: Configuration) {
    return {
        /**
         * The available banks, features available for the banks, and relevant fields.
         * @summary Get Bank Metadata
         * @param {string} [requestId] An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit.
         * @param {string} [xCorrelationId] An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMeta(requestId?: string, xCorrelationId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<BankMetadata>>>> {
            const localVarAxiosArgs = await BankMetadataApiAxiosParamCreator(configuration).getMeta(requestId, xCorrelationId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * BankMetadataApi - factory interface
 * @export
 */
export const BankMetadataApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * The available banks, features available for the banks, and relevant fields.
         * @summary Get Bank Metadata
         * @param {string} [requestId] An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit.
         * @param {string} [xCorrelationId] An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMeta(requestId?: string, xCorrelationId?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<BankMetadata>>> {
            return BankMetadataApiFp(configuration).getMeta(requestId, xCorrelationId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BankMetadataApi - object-oriented interface
 * @export
 * @class BankMetadataApi
 * @extends {BaseAPI}
 */
export class BankMetadataApi extends BaseAPI {
    /**
     * The available banks, features available for the banks, and relevant fields.
     * @summary Get Bank Metadata
     * @param {string} [requestId] An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit.
     * @param {string} [xCorrelationId] An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankMetadataApi
     */
    public async getMeta(requestId?: string, xCorrelationId?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<BankMetadata>>> {
        return BankMetadataApiFp(this.configuration).getMeta(requestId, xCorrelationId, options).then((request) => request(this.axios, this.basePath));
    }
}
