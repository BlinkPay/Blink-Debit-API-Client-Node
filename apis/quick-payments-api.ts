/* tslint:disable */
/* eslint-disable */
/**
 * Blink Debit (PayNow and AutoPay) Payments API
 * APIs to execute Direct Credit payments for customers who use online banking with supported banks.  These APIs power **Blink PayNow** enabling one-off payments, and **Blink AutoPay** enabling recurring payments.  **Request IDs** Request IDs are included in the header in every response, to assist in tracing and debugging.  **API Change Policy** Additive changes may be made to request query parameters and JSON responses. To preserve backward compatibility, endpoint naming updates or JSON elements that already exist will not be removed or renamed until a major version (URL) change. This policy applies only after the official v1 release.
 *
 * OpenAPI spec version: 1.0.19
 * Contact: sysadmin@blinkpay.co.nz
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { CreateQuickPaymentResponse } from '../models';
import { DetailErrorResponseModel } from '../models';
import { QuickPaymentRequest } from '../models';
import { QuickPaymentResponse } from '../models';
/**
 * QuickPaymentsApi - axios parameter creator
 * @export
 */
export const QuickPaymentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a quick payment, which both obtains the consent and debits the requested one-off payment.  This endpoint begins the customer consent process. Once the consent is authorised, Blink automatically attempts to debit the payment.  A successful response does **not** indicate a successful debit. The payment status can be checked by subsequent calls to the single payment endpoint.
         * @summary Create Quick Payment
         * @param {QuickPaymentRequest} [body] The single payment request parameters.
         * @param {string} [requestId] An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit.
         * @param {string} [xCorrelationId] An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit.
         * @param {string} [xCustomerIp] The customers IP address
         * @param {string} [idempotencyKey] An optional idempotency key to prevent duplicate submissions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQuickPayment: async (body?: QuickPaymentRequest, requestId?: string, xCorrelationId?: string, xCustomerIp?: string, idempotencyKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/quick-payments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Bearer", ["create:single_consent", "view:single_consent", "revoke:single_consent", "create:enduring_consent", "view:enduring_consent", "revoke:enduring_consent", "create:payment", "view:payment", "view:metadata", "view:transaction", "create:quick_payment", "view:quick_payment", "create:refund", "view:refund"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (requestId !== undefined && requestId !== null) {
                localVarHeaderParameter['request-id'] = String(JSON.stringify(requestId));
            }

            if (xCorrelationId !== undefined && xCorrelationId !== null) {
                localVarHeaderParameter['x-correlation-id'] = String(JSON.stringify(xCorrelationId));
            }

            if (xCustomerIp !== undefined && xCustomerIp !== null) {
                localVarHeaderParameter['x-customer-ip'] = String(xCustomerIp);
            }

            if (idempotencyKey !== undefined && idempotencyKey !== null) {
                localVarHeaderParameter['idempotency-key'] = String(JSON.stringify(idempotencyKey));
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a quick payment by ID.
         * @summary Get Quick Payment
         * @param {string} quickPaymentId The quick payment ID
         * @param {string} [requestId] An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit.
         * @param {string} [xCorrelationId] An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuickPayment: async (quickPaymentId: string, requestId?: string, xCorrelationId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'quickPaymentId' is not null or undefined
            if (quickPaymentId === null || quickPaymentId === undefined) {
                throw new RequiredError('quickPaymentId','Required parameter quickPaymentId was null or undefined when calling getQuickPayment.');
            }
            const localVarPath = `/quick-payments/{quick_payment_id}`
                .replace(`{${"quick_payment_id"}}`, encodeURIComponent(String(quickPaymentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Bearer", ["create:single_consent", "view:single_consent", "revoke:single_consent", "create:enduring_consent", "view:enduring_consent", "revoke:enduring_consent", "create:payment", "view:payment", "view:metadata", "view:transaction", "create:quick_payment", "view:quick_payment", "create:refund", "view:refund"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (requestId !== undefined && requestId !== null) {
                localVarHeaderParameter['request-id'] = String(JSON.stringify(requestId));
            }

            if (xCorrelationId !== undefined && xCorrelationId !== null) {
                localVarHeaderParameter['x-correlation-id'] = String(JSON.stringify(xCorrelationId));
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Revoke an existing (unpaid) quick payment by ID.  The quick payment cannot be revoked if the payment has already been made.
         * @summary Revoke Quick Payment
         * @param {string} quickPaymentId The quick payment ID
         * @param {string} [requestId] An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit.
         * @param {string} [xCorrelationId] An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeQuickPayment: async (quickPaymentId: string, requestId?: string, xCorrelationId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'quickPaymentId' is not null or undefined
            if (quickPaymentId === null || quickPaymentId === undefined) {
                throw new RequiredError('quickPaymentId','Required parameter quickPaymentId was null or undefined when calling revokeQuickPayment.');
            }
            const localVarPath = `/quick-payments/{quick_payment_id}`
                .replace(`{${"quick_payment_id"}}`, encodeURIComponent(String(quickPaymentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Bearer", ["create:single_consent", "view:single_consent", "revoke:single_consent", "create:enduring_consent", "view:enduring_consent", "revoke:enduring_consent", "create:payment", "view:payment", "view:metadata", "view:transaction", "create:quick_payment", "view:quick_payment", "create:refund", "view:refund"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (requestId !== undefined && requestId !== null) {
                localVarHeaderParameter['request-id'] = String(JSON.stringify(requestId));
            }

            if (xCorrelationId !== undefined && xCorrelationId !== null) {
                localVarHeaderParameter['x-correlation-id'] = String(JSON.stringify(xCorrelationId));
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * QuickPaymentsApi - functional programming interface
 * @export
 */
export const QuickPaymentsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Create a quick payment, which both obtains the consent and debits the requested one-off payment.  This endpoint begins the customer consent process. Once the consent is authorised, Blink automatically attempts to debit the payment.  A successful response does **not** indicate a successful debit. The payment status can be checked by subsequent calls to the single payment endpoint.
         * @summary Create Quick Payment
         * @param {QuickPaymentRequest} [body] The single payment request parameters.
         * @param {string} [requestId] An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit.
         * @param {string} [xCorrelationId] An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit.
         * @param {string} [xCustomerIp] The customers IP address
         * @param {string} [idempotencyKey] An optional idempotency key to prevent duplicate submissions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createQuickPayment(body?: QuickPaymentRequest, requestId?: string, xCorrelationId?: string, xCustomerIp?: string, idempotencyKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CreateQuickPaymentResponse>>> {
            const localVarAxiosArgs = await QuickPaymentsApiAxiosParamCreator(configuration).createQuickPayment(body, requestId, xCorrelationId, xCustomerIp, idempotencyKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a quick payment by ID.
         * @summary Get Quick Payment
         * @param {string} quickPaymentId The quick payment ID
         * @param {string} [requestId] An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit.
         * @param {string} [xCorrelationId] An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getQuickPayment(quickPaymentId: string, requestId?: string, xCorrelationId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<QuickPaymentResponse>>> {
            const localVarAxiosArgs = await QuickPaymentsApiAxiosParamCreator(configuration).getQuickPayment(quickPaymentId, requestId, xCorrelationId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Revoke an existing (unpaid) quick payment by ID.  The quick payment cannot be revoked if the payment has already been made.
         * @summary Revoke Quick Payment
         * @param {string} quickPaymentId The quick payment ID
         * @param {string} [requestId] An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit.
         * @param {string} [xCorrelationId] An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async revokeQuickPayment(quickPaymentId: string, requestId?: string, xCorrelationId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await QuickPaymentsApiAxiosParamCreator(configuration).revokeQuickPayment(quickPaymentId, requestId, xCorrelationId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * QuickPaymentsApi - factory interface
 * @export
 */
export const QuickPaymentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Create a quick payment, which both obtains the consent and debits the requested one-off payment.  This endpoint begins the customer consent process. Once the consent is authorised, Blink automatically attempts to debit the payment.  A successful response does **not** indicate a successful debit. The payment status can be checked by subsequent calls to the single payment endpoint.
         * @summary Create Quick Payment
         * @param {QuickPaymentRequest} [body] The single payment request parameters.
         * @param {string} [requestId] An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit.
         * @param {string} [xCorrelationId] An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit.
         * @param {string} [xCustomerIp] The customers IP address
         * @param {string} [idempotencyKey] An optional idempotency key to prevent duplicate submissions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createQuickPayment(body?: QuickPaymentRequest, requestId?: string, xCorrelationId?: string, xCustomerIp?: string, idempotencyKey?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<CreateQuickPaymentResponse>> {
            return QuickPaymentsApiFp(configuration).createQuickPayment(body, requestId, xCorrelationId, xCustomerIp, idempotencyKey, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a quick payment by ID.
         * @summary Get Quick Payment
         * @param {string} quickPaymentId The quick payment ID
         * @param {string} [requestId] An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit.
         * @param {string} [xCorrelationId] An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getQuickPayment(quickPaymentId: string, requestId?: string, xCorrelationId?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<QuickPaymentResponse>> {
            return QuickPaymentsApiFp(configuration).getQuickPayment(quickPaymentId, requestId, xCorrelationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Revoke an existing (unpaid) quick payment by ID.  The quick payment cannot be revoked if the payment has already been made.
         * @summary Revoke Quick Payment
         * @param {string} quickPaymentId The quick payment ID
         * @param {string} [requestId] An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit.
         * @param {string} [xCorrelationId] An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async revokeQuickPayment(quickPaymentId: string, requestId?: string, xCorrelationId?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return QuickPaymentsApiFp(configuration).revokeQuickPayment(quickPaymentId, requestId, xCorrelationId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * QuickPaymentsApi - object-oriented interface
 * @export
 * @class QuickPaymentsApi
 * @extends {BaseAPI}
 */
export class QuickPaymentsApi extends BaseAPI {
    /**
     * Create a quick payment, which both obtains the consent and debits the requested one-off payment.  This endpoint begins the customer consent process. Once the consent is authorised, Blink automatically attempts to debit the payment.  A successful response does **not** indicate a successful debit. The payment status can be checked by subsequent calls to the single payment endpoint.
     * @summary Create Quick Payment
     * @param {QuickPaymentRequest} [body] The single payment request parameters.
     * @param {string} [requestId] An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit.
     * @param {string} [xCorrelationId] An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit.
     * @param {string} [xCustomerIp] The customers IP address
     * @param {string} [idempotencyKey] An optional idempotency key to prevent duplicate submissions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuickPaymentsApi
     */
    public async createQuickPayment(body?: QuickPaymentRequest, requestId?: string, xCorrelationId?: string, xCustomerIp?: string, idempotencyKey?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<CreateQuickPaymentResponse>> {
        return QuickPaymentsApiFp(this.configuration).createQuickPayment(body, requestId, xCorrelationId, xCustomerIp, idempotencyKey, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a quick payment by ID.
     * @summary Get Quick Payment
     * @param {string} quickPaymentId The quick payment ID
     * @param {string} [requestId] An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit.
     * @param {string} [xCorrelationId] An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuickPaymentsApi
     */
    public async getQuickPayment(quickPaymentId: string, requestId?: string, xCorrelationId?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<QuickPaymentResponse>> {
        return QuickPaymentsApiFp(this.configuration).getQuickPayment(quickPaymentId, requestId, xCorrelationId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Revoke an existing (unpaid) quick payment by ID.  The quick payment cannot be revoked if the payment has already been made.
     * @summary Revoke Quick Payment
     * @param {string} quickPaymentId The quick payment ID
     * @param {string} [requestId] An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit.
     * @param {string} [xCorrelationId] An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuickPaymentsApi
     */
    public async revokeQuickPayment(quickPaymentId: string, requestId?: string, xCorrelationId?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return QuickPaymentsApiFp(this.configuration).revokeQuickPayment(quickPaymentId, requestId, xCorrelationId, options).then((request) => request(this.axios, this.basePath));
    }
}
