/* tslint:disable */
/* eslint-disable */
/**
 * Blink Debit (PayNow and AutoPay) Payments API
 * APIs to execute Direct Credit payments for customers who use online banking with supported banks.  These APIs power **Blink PayNow** enabling one-off payments, and **Blink AutoPay** enabling recurring payments.  **Request IDs** Request IDs are included in the header in every response, to assist in tracing and debugging.  **API Change Policy** Additive changes may be made to request query parameters and JSON responses. To preserve backward compatibility, endpoint naming updates or JSON elements that already exist will not be removed or renamed until a major version (URL) change. This policy applies only after the official v1 release.
 *
 * OpenAPI spec version: 1.0.19
 * Contact: sysadmin@blinkpay.co.nz
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { DetailErrorResponseModel } from '../models';
import { Refund } from '../models';
import { RefundDetail } from '../models';
import { RefundResponse } from '../models';
/**
 * RefundsApi - axios parameter creator
 * @export
 */
export const RefundsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a request for refund.  Multiple money-transfer refunds can be processed aganist one payment, but for no greater than the total value of the payment.  **For money transfer refunds, a 201 response does not indicate that the refund has been processed successfully. The status needs to be subsequently checked using the GET endpoint**
         * @summary Create Refund
         * @param {RefundDetail} [body] The particulars of the refund request.

In the case of money transfers, PCR is included to provide reference details to the customers bank account about the refund.

Amount can be included if the type is a &#x60;partial_refund&#x60;.
         * @param {string} [requestId] An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit.
         * @param {string} [xCorrelationId] An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRefund: async (body?: RefundDetail, requestId?: string, xCorrelationId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/refunds`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Bearer", ["create:single_consent", "view:single_consent", "revoke:single_consent", "create:enduring_consent", "view:enduring_consent", "revoke:enduring_consent", "create:payment", "view:payment", "view:metadata", "view:transaction", "create:quick_payment", "view:quick_payment", "create:refund", "view:refund"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (requestId !== undefined && requestId !== null) {
                localVarHeaderParameter['request-id'] = String(JSON.stringify(requestId));
            }

            if (xCorrelationId !== undefined && xCorrelationId !== null) {
                localVarHeaderParameter['x-correlation-id'] = String(JSON.stringify(xCorrelationId));
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get refund by ID.
         * @summary Get Refund
         * @param {string} refundId The refund ID
         * @param {string} [requestId] An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit.
         * @param {string} [xCorrelationId] An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRefund: async (refundId: string, requestId?: string, xCorrelationId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'refundId' is not null or undefined
            if (refundId === null || refundId === undefined) {
                throw new RequiredError('refundId','Required parameter refundId was null or undefined when calling getRefund.');
            }
            const localVarPath = `/refunds/{refund_id}`
                .replace(`{${"refund_id"}}`, encodeURIComponent(String(refundId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Bearer", ["create:single_consent", "view:single_consent", "revoke:single_consent", "create:enduring_consent", "view:enduring_consent", "revoke:enduring_consent", "create:payment", "view:payment", "view:metadata", "view:transaction", "create:quick_payment", "view:quick_payment", "create:refund", "view:refund"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (requestId !== undefined && requestId !== null) {
                localVarHeaderParameter['request-id'] = String(JSON.stringify(requestId));
            }

            if (xCorrelationId !== undefined && xCorrelationId !== null) {
                localVarHeaderParameter['x-correlation-id'] = String(JSON.stringify(xCorrelationId));
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RefundsApi - functional programming interface
 * @export
 */
export const RefundsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Create a request for refund.  Multiple money-transfer refunds can be processed aganist one payment, but for no greater than the total value of the payment.  **For money transfer refunds, a 201 response does not indicate that the refund has been processed successfully. The status needs to be subsequently checked using the GET endpoint**
         * @summary Create Refund
         * @param {RefundDetail} [body] The particulars of the refund request.

In the case of money transfers, PCR is included to provide reference details to the customers bank account about the refund.

Amount can be included if the type is a &#x60;partial_refund&#x60;.
         * @param {string} [requestId] An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit.
         * @param {string} [xCorrelationId] An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRefund(body?: RefundDetail, requestId?: string, xCorrelationId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<RefundResponse>>> {
            const localVarAxiosArgs = await RefundsApiAxiosParamCreator(configuration).createRefund(body, requestId, xCorrelationId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get refund by ID.
         * @summary Get Refund
         * @param {string} refundId The refund ID
         * @param {string} [requestId] An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit.
         * @param {string} [xCorrelationId] An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRefund(refundId: string, requestId?: string, xCorrelationId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Refund>>> {
            const localVarAxiosArgs = await RefundsApiAxiosParamCreator(configuration).getRefund(refundId, requestId, xCorrelationId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * RefundsApi - factory interface
 * @export
 */
export const RefundsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Create a request for refund.  Multiple money-transfer refunds can be processed aganist one payment, but for no greater than the total value of the payment.  **For money transfer refunds, a 201 response does not indicate that the refund has been processed successfully. The status needs to be subsequently checked using the GET endpoint**
         * @summary Create Refund
         * @param {RefundDetail} [body] The particulars of the refund request.

In the case of money transfers, PCR is included to provide reference details to the customers bank account about the refund.

Amount can be included if the type is a &#x60;partial_refund&#x60;.
         * @param {string} [requestId] An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit.
         * @param {string} [xCorrelationId] An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRefund(body?: RefundDetail, requestId?: string, xCorrelationId?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<RefundResponse>> {
            return RefundsApiFp(configuration).createRefund(body, requestId, xCorrelationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get refund by ID.
         * @summary Get Refund
         * @param {string} refundId The refund ID
         * @param {string} [requestId] An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit.
         * @param {string} [xCorrelationId] An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRefund(refundId: string, requestId?: string, xCorrelationId?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Refund>> {
            return RefundsApiFp(configuration).getRefund(refundId, requestId, xCorrelationId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RefundsApi - object-oriented interface
 * @export
 * @class RefundsApi
 * @extends {BaseAPI}
 */
export class RefundsApi extends BaseAPI {
    /**
     * Create a request for refund.  Multiple money-transfer refunds can be processed aganist one payment, but for no greater than the total value of the payment.  **For money transfer refunds, a 201 response does not indicate that the refund has been processed successfully. The status needs to be subsequently checked using the GET endpoint**
     * @summary Create Refund
     * @param {RefundDetail} [body] The particulars of the refund request.

In the case of money transfers, PCR is included to provide reference details to the customers bank account about the refund.

Amount can be included if the type is a &#x60;partial_refund&#x60;.
     * @param {string} [requestId] An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit.
     * @param {string} [xCorrelationId] An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefundsApi
     */
    public async createRefund(body?: RefundDetail, requestId?: string, xCorrelationId?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<RefundResponse>> {
        return RefundsApiFp(this.configuration).createRefund(body, requestId, xCorrelationId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get refund by ID.
     * @summary Get Refund
     * @param {string} refundId The refund ID
     * @param {string} [requestId] An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit.
     * @param {string} [xCorrelationId] An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefundsApi
     */
    public async getRefund(refundId: string, requestId?: string, xCorrelationId?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Refund>> {
        return RefundsApiFp(this.configuration).getRefund(refundId, requestId, xCorrelationId, options).then((request) => request(this.axios, this.basePath));
    }
}
