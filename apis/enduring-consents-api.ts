/* tslint:disable */
/* eslint-disable */
/**
 * Blink Debit (PayNow and AutoPay) Payments API
 * APIs to execute Direct Credit payments for customers who use online banking with supported banks.  These APIs power **Blink PayNow** enabling one-off payments, and **Blink AutoPay** enabling recurring payments.  **Request IDs** Request IDs are included in the header in every response, to assist in tracing and debugging.  **API Change Policy** Additive changes may be made to request query parameters and JSON responses. To preserve backward compatibility, endpoint naming updates or JSON elements that already exist will not be removed or renamed until a major version (URL) change. This policy applies only after the official v1 release.
 *
 * OpenAPI spec version: 1.0.19
 * Contact: sysadmin@blinkpay.co.nz
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { Consent } from '../models';
import { CreateConsentResponse } from '../models';
import { DetailErrorResponseModel } from '../models';
import { EnduringConsentRequest } from '../models';
/**
 * EnduringConsentsApi - axios parameter creator
 * @export
 */
export const EnduringConsentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create an enduring consent request with the bank that will go to the customer for approval.  A successful response does not indicate a completed consent. The status of the consent can be subsequently checked with the consent ID.
         * @summary Create Enduring Consent
         * @param {EnduringConsentRequest} [body] The consent request parameters.
         * @param {string} [requestId] An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit.
         * @param {string} [xCorrelationId] An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit.
         * @param {string} [xCustomerIp] The customers IP address
         * @param {string} [idempotencyKey] An optional idempotency key to prevent duplicate submissions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEnduringConsent: async (body?: EnduringConsentRequest, requestId?: string, xCorrelationId?: string, xCustomerIp?: string, idempotencyKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/enduring-consents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Bearer", ["create:single_consent", "view:single_consent", "revoke:single_consent", "create:enduring_consent", "view:enduring_consent", "revoke:enduring_consent", "create:payment", "view:payment", "view:metadata", "view:transaction", "create:quick_payment", "view:quick_payment", "create:refund", "view:refund"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (requestId !== undefined && requestId !== null) {
                localVarHeaderParameter['request-id'] = String(JSON.stringify(requestId));
            }

            if (xCorrelationId !== undefined && xCorrelationId !== null) {
                localVarHeaderParameter['x-correlation-id'] = String(JSON.stringify(xCorrelationId));
            }

            if (xCustomerIp !== undefined && xCustomerIp !== null) {
                localVarHeaderParameter['x-customer-ip'] = String(xCustomerIp);
            }

            if (idempotencyKey !== undefined && idempotencyKey !== null) {
                localVarHeaderParameter['idempotency-key'] = String(JSON.stringify(idempotencyKey));
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an existing consent by ID.
         * @summary Get Enduring Consent
         * @param {string} consentId The consent ID
         * @param {string} [requestId] An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit.
         * @param {string} [xCorrelationId] An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnduringConsent: async (consentId: string, requestId?: string, xCorrelationId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'consentId' is not null or undefined
            if (consentId === null || consentId === undefined) {
                throw new RequiredError('consentId','Required parameter consentId was null or undefined when calling getEnduringConsent.');
            }
            const localVarPath = `/enduring-consents/{consent_id}`
                .replace(`{${"consent_id"}}`, encodeURIComponent(String(consentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Bearer", ["create:single_consent", "view:single_consent", "revoke:single_consent", "create:enduring_consent", "view:enduring_consent", "revoke:enduring_consent", "create:payment", "view:payment", "view:metadata", "view:transaction", "create:quick_payment", "view:quick_payment", "create:refund", "view:refund"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (requestId !== undefined && requestId !== null) {
                localVarHeaderParameter['request-id'] = String(JSON.stringify(requestId));
            }

            if (xCorrelationId !== undefined && xCorrelationId !== null) {
                localVarHeaderParameter['x-correlation-id'] = String(JSON.stringify(xCorrelationId));
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Revoke an existing consent by ID.
         * @summary Revoke Enduring Consent
         * @param {string} consentId The consent ID
         * @param {string} [requestId] An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit.
         * @param {string} [xCorrelationId] An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeEnduringConsent: async (consentId: string, requestId?: string, xCorrelationId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'consentId' is not null or undefined
            if (consentId === null || consentId === undefined) {
                throw new RequiredError('consentId','Required parameter consentId was null or undefined when calling revokeEnduringConsent.');
            }
            const localVarPath = `/enduring-consents/{consent_id}`
                .replace(`{${"consent_id"}}`, encodeURIComponent(String(consentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Bearer", ["create:single_consent", "view:single_consent", "revoke:single_consent", "create:enduring_consent", "view:enduring_consent", "revoke:enduring_consent", "create:payment", "view:payment", "view:metadata", "view:transaction", "create:quick_payment", "view:quick_payment", "create:refund", "view:refund"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (requestId !== undefined && requestId !== null) {
                localVarHeaderParameter['request-id'] = String(JSON.stringify(requestId));
            }

            if (xCorrelationId !== undefined && xCorrelationId !== null) {
                localVarHeaderParameter['x-correlation-id'] = String(JSON.stringify(xCorrelationId));
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EnduringConsentsApi - functional programming interface
 * @export
 */
export const EnduringConsentsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Create an enduring consent request with the bank that will go to the customer for approval.  A successful response does not indicate a completed consent. The status of the consent can be subsequently checked with the consent ID.
         * @summary Create Enduring Consent
         * @param {EnduringConsentRequest} [body] The consent request parameters.
         * @param {string} [requestId] An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit.
         * @param {string} [xCorrelationId] An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit.
         * @param {string} [xCustomerIp] The customers IP address
         * @param {string} [idempotencyKey] An optional idempotency key to prevent duplicate submissions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEnduringConsent(body?: EnduringConsentRequest, requestId?: string, xCorrelationId?: string, xCustomerIp?: string, idempotencyKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CreateConsentResponse>>> {
            const localVarAxiosArgs = await EnduringConsentsApiAxiosParamCreator(configuration).createEnduringConsent(body, requestId, xCorrelationId, xCustomerIp, idempotencyKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get an existing consent by ID.
         * @summary Get Enduring Consent
         * @param {string} consentId The consent ID
         * @param {string} [requestId] An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit.
         * @param {string} [xCorrelationId] An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEnduringConsent(consentId: string, requestId?: string, xCorrelationId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Consent>>> {
            const localVarAxiosArgs = await EnduringConsentsApiAxiosParamCreator(configuration).getEnduringConsent(consentId, requestId, xCorrelationId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Revoke an existing consent by ID.
         * @summary Revoke Enduring Consent
         * @param {string} consentId The consent ID
         * @param {string} [requestId] An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit.
         * @param {string} [xCorrelationId] An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async revokeEnduringConsent(consentId: string, requestId?: string, xCorrelationId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await EnduringConsentsApiAxiosParamCreator(configuration).revokeEnduringConsent(consentId, requestId, xCorrelationId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * EnduringConsentsApi - factory interface
 * @export
 */
export const EnduringConsentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Create an enduring consent request with the bank that will go to the customer for approval.  A successful response does not indicate a completed consent. The status of the consent can be subsequently checked with the consent ID.
         * @summary Create Enduring Consent
         * @param {EnduringConsentRequest} [body] The consent request parameters.
         * @param {string} [requestId] An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit.
         * @param {string} [xCorrelationId] An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit.
         * @param {string} [xCustomerIp] The customers IP address
         * @param {string} [idempotencyKey] An optional idempotency key to prevent duplicate submissions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEnduringConsent(body?: EnduringConsentRequest, requestId?: string, xCorrelationId?: string, xCustomerIp?: string, idempotencyKey?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<CreateConsentResponse>> {
            return EnduringConsentsApiFp(configuration).createEnduringConsent(body, requestId, xCorrelationId, xCustomerIp, idempotencyKey, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an existing consent by ID.
         * @summary Get Enduring Consent
         * @param {string} consentId The consent ID
         * @param {string} [requestId] An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit.
         * @param {string} [xCorrelationId] An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEnduringConsent(consentId: string, requestId?: string, xCorrelationId?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Consent>> {
            return EnduringConsentsApiFp(configuration).getEnduringConsent(consentId, requestId, xCorrelationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Revoke an existing consent by ID.
         * @summary Revoke Enduring Consent
         * @param {string} consentId The consent ID
         * @param {string} [requestId] An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit.
         * @param {string} [xCorrelationId] An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async revokeEnduringConsent(consentId: string, requestId?: string, xCorrelationId?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return EnduringConsentsApiFp(configuration).revokeEnduringConsent(consentId, requestId, xCorrelationId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EnduringConsentsApi - object-oriented interface
 * @export
 * @class EnduringConsentsApi
 * @extends {BaseAPI}
 */
export class EnduringConsentsApi extends BaseAPI {
    /**
     * Create an enduring consent request with the bank that will go to the customer for approval.  A successful response does not indicate a completed consent. The status of the consent can be subsequently checked with the consent ID.
     * @summary Create Enduring Consent
     * @param {EnduringConsentRequest} [body] The consent request parameters.
     * @param {string} [requestId] An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit.
     * @param {string} [xCorrelationId] An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit.
     * @param {string} [xCustomerIp] The customers IP address
     * @param {string} [idempotencyKey] An optional idempotency key to prevent duplicate submissions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnduringConsentsApi
     */
    public async createEnduringConsent(body?: EnduringConsentRequest, requestId?: string, xCorrelationId?: string, xCustomerIp?: string, idempotencyKey?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<CreateConsentResponse>> {
        return EnduringConsentsApiFp(this.configuration).createEnduringConsent(body, requestId, xCorrelationId, xCustomerIp, idempotencyKey, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get an existing consent by ID.
     * @summary Get Enduring Consent
     * @param {string} consentId The consent ID
     * @param {string} [requestId] An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit.
     * @param {string} [xCorrelationId] An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnduringConsentsApi
     */
    public async getEnduringConsent(consentId: string, requestId?: string, xCorrelationId?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Consent>> {
        return EnduringConsentsApiFp(this.configuration).getEnduringConsent(consentId, requestId, xCorrelationId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Revoke an existing consent by ID.
     * @summary Revoke Enduring Consent
     * @param {string} consentId The consent ID
     * @param {string} [requestId] An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit.
     * @param {string} [xCorrelationId] An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnduringConsentsApi
     */
    public async revokeEnduringConsent(consentId: string, requestId?: string, xCorrelationId?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return EnduringConsentsApiFp(this.configuration).revokeEnduringConsent(consentId, requestId, xCorrelationId, options).then((request) => request(this.axios, this.basePath));
    }
}
